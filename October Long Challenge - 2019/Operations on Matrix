Question :
----------------

"It's totally fun to play troublemakers ― totally." - Lee Pace

Sakshi had a matrix with N rows (numbered 1 through N) and M columns (numbered 1 through M). Initially, all cells of this matrix contained 0-s. Let's denote a cell in row r and column c by (r,c).

Sakshi is well-known for troubling others. This time, her friends Nikki and Mansi planned to take revenge and teach her a lesson, so they changed her matrix by performing the following operation Q times:

Choose any valid cell (x,y).
Add 1 to all the cells in row x.
Add 1 to all the cells in column y.
For each valid i, the cell chosen in the i-th operation was (Xi,Yi). Nikki and Mansi challenged Sakshi to find the number of cells in the resulting matrix which contain odd integers. Sakshi is not good at math, since she has spent all her life troubling others, so this time, she really needs your help. Help Sakshi find the answer.

Input
The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.
The first line of each test case contains three space-separated integers N, M and Q.
Q lines follow. For each i (1≤i≤Q), the i-th of these lines contains two space-separated integers Xi and Yi.
Output
For each test case, print a single line containing one integer ― the number of cells with odd values.

Constraints
1≤T≤300
1≤N,M,Q≤105
1≤Xi≤N for each valid i
1≤Yi≤M for each valid i
the sum of N over all test cases does not exceed 3⋅105
the sum of M over all test cases does not exceed 3⋅105
the sum of Q over all test cases does not exceed 3⋅105
Subtasks
Subtask #1 (40 points):

1≤N,M,Q≤300
Subtask #2 (40 points):

1≤T≤3
1≤N⋅M≤106
1≤Q≤105
Subtask #3 (20 points): original constraints

Example Input
1
2 2 3
1 1
1 2
2 1
Example Output
2
Explanation
Example case 1: After applying the first operation, the matrix becomes:

2 1
1 0
After applying the second operation, it becomes:

3 3
1 1
Finally, after applying the third operation, it becomes:

4 3
3 2
==================================================================================================================================

Approach :
---------------

           tack 2 arrays :
                     1-> for representing the rows r[].
                     2-> for representing the columns.
           mark the given all elements :
                     if given element is (i,j)
                     -  then increment the value in r[] at i th place stating that i th row of original array is filled with one element.
                     -  then increment the value in c[] at j th place stating that j th coloumn of original array is filled with one element.
           finding the even elements for the original array :
                     -  count the number of even elements(er) & odd elements(or) in the r[];
                     -  count the number of even elements(ec) & odd elements(oc) in the c[];
                     -  now we can say that how many rows/columns are odd and how many rows/columns in original array.
                     -  ((er*oc)+(or*ec)) this will give us output.
                     
                     
complexity :
---------------
            Q ( marking the all elements ) + m (checking odd/even in r[]) + n (checking odd/even in c[]) 
            O(Q+m+n);
==================================================================================================================================

Solution :
---------------

      /* package codechef; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Codechef
{
	public static void main (String[] args) throws java.lang.Exception
	{
		// your code goes here
		try{
		Scanner sc=new Scanner(System.in);
		int t=sc.nextInt();
		while(t-->0){
		    int n=sc.nextInt();
		    int r[]=new int[n+1];
		    int m=sc.nextInt();
		    int c[]=new int[m+1];
		    int q=sc.nextInt();
		    while(q-->0){
		        r[sc.nextInt()]++;
		        c[sc.nextInt()]++;
		    }
		    long er=0;
		    long or=0;
		    for(int i=1;i<=n;i++){
		        if((r[i]&1)==0)
		            er++;
		        else
		            or++;
		    }
		    long ec=0;
		    long oc=0;
		    for(int i=1;i<=m;i++){
		        if((c[i]&1)==0)
		            ec++;
		        else
		            oc++;
		    }
		    System.out.println(((er*oc)+(or*ec)));
		}
		}
		catch(Exception e){
		    
		}
	}
}


